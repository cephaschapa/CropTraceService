import { AbstractStream } from '@libp2p/interface-stream-muxer/stream';
import { Uint8ArrayList } from 'uint8arraylist';
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
import { MAX_MSG_SIZE } from './decode.js';
import { InitiatorMessageTypes, ReceiverMessageTypes } from './message-types.js';
class MplexStream extends AbstractStream {
    name;
    streamId;
    send;
    types;
    constructor(init) {
        super(init);
        this.types = init.direction === 'outbound' ? InitiatorMessageTypes : ReceiverMessageTypes;
        this.send = init.send;
        this.name = init.name;
        this.streamId = init.streamId;
    }
    sendNewStream() {
        this.send({ id: this.streamId, type: InitiatorMessageTypes.NEW_STREAM, data: new Uint8ArrayList(uint8ArrayFromString(this.name)) });
    }
    sendData(data) {
        this.send({ id: this.streamId, type: this.types.MESSAGE, data });
    }
    sendReset() {
        this.send({ id: this.streamId, type: this.types.RESET });
    }
    sendCloseWrite() {
        this.send({ id: this.streamId, type: this.types.CLOSE });
    }
    sendCloseRead() {
        // mplex does not support close read, only close write
    }
}
export function createStream(options) {
    const { id, name, send, onEnd, type = 'initiator', maxMsgSize = MAX_MSG_SIZE } = options;
    return new MplexStream({
        id: type === 'initiator' ? (`i${id}`) : `r${id}`,
        streamId: id,
        name: `${name == null ? id : name}`,
        direction: type === 'initiator' ? 'outbound' : 'inbound',
        maxDataSize: maxMsgSize,
        onEnd,
        send
    });
}
//# sourceMappingURL=stream.js.map