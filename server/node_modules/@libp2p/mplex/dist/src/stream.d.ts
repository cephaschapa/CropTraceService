import { AbstractStream, type AbstractStreamInit } from '@libp2p/interface-stream-muxer/stream';
import { Uint8ArrayList } from 'uint8arraylist';
import type { Message } from './message-types.js';
export interface Options {
    id: number;
    send: (msg: Message) => void;
    name?: string;
    onEnd?: (err?: Error) => void;
    type?: 'initiator' | 'receiver';
    maxMsgSize?: number;
}
interface MplexStreamInit extends AbstractStreamInit {
    streamId: number;
    name: string;
    send: (msg: Message) => void;
}
declare class MplexStream extends AbstractStream {
    private readonly name;
    private readonly streamId;
    private readonly send;
    private readonly types;
    constructor(init: MplexStreamInit);
    sendNewStream(): void;
    sendData(data: Uint8ArrayList): void;
    sendReset(): void;
    sendCloseWrite(): void;
    sendCloseRead(): void;
}
export declare function createStream(options: Options): MplexStream;
export {};
//# sourceMappingURL=stream.d.ts.map