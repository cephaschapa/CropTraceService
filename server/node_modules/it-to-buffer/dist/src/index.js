import { concat as uint8ArrayConcat } from 'uint8arrays/concat';
function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
function toBuffer(source) {
    if (isAsyncIterable(source)) {
        return (async () => {
            let buffer = new Uint8Array(0);
            for await (const buf of source) {
                buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length);
            }
            return buffer;
        })();
    }
    const bufs = [];
    let length = 0;
    for (const buf of source) {
        bufs.push(buf);
        length += buf.byteLength;
    }
    return uint8ArrayConcat(bufs, length);
}
export default toBuffer;
//# sourceMappingURL=index.js.map