/**
 * @packageDocumentation
 *
 * Create a Helia node.
 *
 * @example
 *
 * ```typescript
 * import { MemoryDatastore } from 'datastore-core'
 * import { MemoryBlockstore } from 'blockstore-core'
 * import { createHelia } from 'helia'
 * import { unixfs } from '@helia/unixfs'
 * import { CID } from 'multiformats/cid'
 *
 * const node = await createHelia({
 *   blockstore: new MemoryBlockstore(),
 *   datastore: new MemoryDatastore()
 * })
 * const fs = unixfs(node)
 * fs.cat(CID.parse('bafyFoo'))
 * ```
 */
import { logger } from '@libp2p/logger';
import { MemoryBlockstore } from 'blockstore-core';
import { MemoryDatastore } from 'datastore-core';
import { HeliaImpl } from './helia.js';
import { createLibp2p } from './utils/libp2p.js';
import { name, version } from './version.js';
const log = logger('helia');
export async function createHelia(init = {}) {
    const datastore = init.datastore ?? new MemoryDatastore();
    const blockstore = init.blockstore ?? new MemoryBlockstore();
    let libp2p;
    if (isLibp2p(init.libp2p)) {
        libp2p = init.libp2p;
    }
    else {
        libp2p = await createLibp2p(datastore, init.libp2p);
    }
    const helia = new HeliaImpl({
        ...init,
        datastore,
        blockstore,
        libp2p
    });
    if (init.start !== false) {
        await helia.start();
    }
    // add helia to agent version
    if (helia.libp2p.isStarted()) {
        await addHeliaToAgentVersion(helia);
    }
    else {
        helia.libp2p.addEventListener('start', () => {
            addHeliaToAgentVersion(helia)
                .catch(err => {
                log.error('could not add Helia to agent version', err);
            });
        });
    }
    return helia;
}
function isLibp2p(obj) {
    if (obj == null) {
        return false;
    }
    // a non-exhaustive list of methods found on the libp2p object
    const funcs = ['dial', 'dialProtocol', 'hangUp', 'handle', 'unhandle', 'getMultiaddrs', 'getProtocols'];
    // if these are all functions it's probably a libp2p object
    return funcs.every(m => typeof obj[m] === 'function');
}
async function addHeliaToAgentVersion(helia) {
    // add helia to agent version
    const peer = await helia.libp2p.peerStore.get(helia.libp2p.peerId);
    const versionBuf = peer.metadata.get('AgentVersion');
    if (versionBuf == null) {
        // identify was not configured
        return;
    }
    let versionStr = new TextDecoder().decode(versionBuf);
    if (versionStr.match(/js-libp2p\/\d+\.\d+\.\d+\sUserAgent=/) == null) {
        // the user changed the agent version
        return;
    }
    if (versionStr.includes(name)) {
        // update version name
        versionStr = `${name}/${version} ${versionStr.split(' ').slice(1).join(' ')}`;
    }
    else {
        // just prepend version name
        versionStr = `${name}/${version} ${versionStr}`;
    }
    await helia.libp2p.peerStore.merge(helia.libp2p.peerId, {
        metadata: {
            AgentVersion: new TextEncoder().encode(versionStr)
        }
    });
}
//# sourceMappingURL=index.js.map