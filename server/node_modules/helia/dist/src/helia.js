import { logger } from '@libp2p/logger';
import { createBitswap } from 'ipfs-bitswap';
import drain from 'it-drain';
import { identity } from 'multiformats/hashes/identity';
import { sha256, sha512 } from 'multiformats/hashes/sha2';
import { CustomProgressEvent } from 'progress-events';
import { PinsImpl } from './pins.js';
import { BlockStorage } from './storage.js';
import { assertDatastoreVersionIsCurrent } from './utils/datastore-version.js';
import { NetworkedStorage } from './utils/networked-storage.js';
const log = logger('helia');
export class HeliaImpl {
    libp2p;
    blockstore;
    datastore;
    pins;
    #bitswap;
    constructor(init) {
        const hashers = [
            sha256,
            sha512,
            identity,
            ...(init.hashers ?? [])
        ];
        this.#bitswap = createBitswap(init.libp2p, init.blockstore, {
            hashLoader: {
                getHasher: async (codecOrName) => {
                    const hasher = hashers.find(hasher => {
                        return hasher.code === codecOrName || hasher.name === codecOrName;
                    });
                    if (hasher != null) {
                        return hasher;
                    }
                    throw new Error(`Could not load hasher for code/name "${codecOrName}"`);
                }
            }
        });
        const networkedStorage = new NetworkedStorage(init.blockstore, {
            bitswap: this.#bitswap
        });
        this.pins = new PinsImpl(init.datastore, networkedStorage, init.dagWalkers ?? []);
        this.libp2p = init.libp2p;
        this.blockstore = new BlockStorage(networkedStorage, this.pins, {
            holdGcLock: init.holdGcLock
        });
        this.datastore = init.datastore;
    }
    async start() {
        await assertDatastoreVersionIsCurrent(this.datastore);
        await this.#bitswap?.start();
        await this.libp2p.start();
    }
    async stop() {
        await this.libp2p.stop();
        await this.#bitswap?.stop();
    }
    async gc(options = {}) {
        const releaseLock = await this.blockstore.lock.writeLock();
        try {
            const helia = this;
            const blockstore = this.blockstore.unwrap();
            log('gc start');
            await drain(blockstore.deleteMany((async function* () {
                for await (const { cid } of blockstore.getAll()) {
                    try {
                        if (await helia.pins.isPinned(cid, options)) {
                            continue;
                        }
                        yield cid;
                        options.onProgress?.(new CustomProgressEvent('helia:gc:deleted', cid));
                    }
                    catch (err) {
                        log.error('Error during gc', err);
                        options.onProgress?.(new CustomProgressEvent('helia:gc:error', err));
                    }
                }
            }())));
        }
        finally {
            releaseLock();
        }
        log('gc finished');
    }
}
//# sourceMappingURL=helia.js.map